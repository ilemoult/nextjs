[{"C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\pages\\api\\hello.js":"1","C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\pages\\api\\shuffletext.js":"2","C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\pages\\bilder.jsx":"3","C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\pages\\blog.jsx":"4","C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\pages\\index.jsx":"5","C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\pages\\news.jsx":"6","C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\pages\\_app.jsx":"7","C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\components\\Footer.jsx":"8","C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\components\\Header.jsx":"9","C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\components\\Layout.jsx":"10","C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\components\\Navigation.jsx":"11","C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\components\\NewsItem.jsx":"12","C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\components\\NewsList.jsx":"13","C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\components\\ShuffleText.jsx":"14","C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\pages\\blog\\[slug].jsx":"15"},{"size":170,"mtime":1648551701169,"results":"16","hashOfConfig":"17"},{"size":947,"mtime":1648580600797,"results":"18","hashOfConfig":"17"},{"size":3489,"mtime":1648716058402,"results":"19","hashOfConfig":"17"},{"size":899,"mtime":1648724403955,"results":"20","hashOfConfig":"17"},{"size":259,"mtime":1648551696941,"results":"21","hashOfConfig":"17"},{"size":3998,"mtime":1648630582798,"results":"22","hashOfConfig":"17"},{"size":187,"mtime":1648551700132,"results":"23","hashOfConfig":"17"},{"size":202,"mtime":1648551694325,"results":"24","hashOfConfig":"17"},{"size":216,"mtime":1648551694299,"results":"25","hashOfConfig":"17"},{"size":479,"mtime":1648551694265,"results":"26","hashOfConfig":"17"},{"size":383,"mtime":1648648367619,"results":"27","hashOfConfig":"17"},{"size":2465,"mtime":1648652773502,"results":"28","hashOfConfig":"17"},{"size":389,"mtime":1648573511658,"results":"29","hashOfConfig":"17"},{"size":1822,"mtime":1648580305570,"results":"30","hashOfConfig":"17"},{"size":4370,"mtime":1648732313580,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jlf6qu",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\pages\\api\\hello.js",[],[],"C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\pages\\api\\shuffletext.js",[],[],"C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\pages\\bilder.jsx",["80","81","82","83","84"],[],"import Layout from '@/components/Layout';\r\nimport Image from 'next/image';\r\nimport hongKong from '@/img/hong-kong.jpg'; // geht nicht in JS // nur in next.js möglich\r\n\r\nexport default function Bilder() {\r\n  return (\r\n    <Layout title=\"Bilder\">\r\n\r\n      <Image /* Image Element ist Next spezifisch - beste konvertierung */\r\n        src={hongKong}\r\n        alt=\"Hong Kong\"\r\n        // width={5184} überflüssig\r\n        // height={3456}\r\n        sizes=\"(max-width: 50rem) 90vw, 48rem\"\r\n        layout=\"responsive\"\r\n        /*\r\n      Wenn man ein Bild, das auf dem Server liegt, zuvor importiert\r\n      und bei src einsetzt, kann man width und height weglassen.\r\n      placeholder=\"blur\" erzeugt eine verschwommene sehr kleine\r\n      Variante des Bildes, die sofort sichtbar ist und dann später\r\n      durch das volle Bild ausgetauscht wird.\r\n      */\r\n        placeholder=\"blur\"\r\n      />\r\n\r\n      <img\r\n        src=\"/img/logo.jpg\"\r\n        srcSet=\"/img/logo@1x.jpg 1x, /img/logo@2x.jpg 2x\" // Je nach Bildschirmauflösung wird das entsprechende Bild gewählt vom Browser\r\n        alt=\"Bildbeschreibung\"\r\n        className=\"logo\"\r\n        height=\"100\" // dem Bild wird schon vor dem Laden der Platz eingereumt. Hier kommt es nicht auf die tatsächliche Größe an, sondern dem Seitenverhältnis\r\n        width=\"320\" // war zuerst aus der Mode gekommen, jetzt ist es aber wieder best Practise\r\n        loading=\"lazy\" // Bild wird nur dann geladen wenn sie kurz davor ist, in den sichtbaren Bereich zu scrollen\r\n      />\r\n\r\n      <img\r\n        src=\"https://picsum.photos/id/1011/900/450\"\r\n        srcSet=\"https://picsum.photos/id/1011/450/225 450w, https://picsum.photos/id/1011/900/450 900w, https://picsum.photos/id/1011/1350/675 1350w, https://picsum.photos/id/1011/1800/900 1800w\"\r\n        sizes=\"(max-width: 50rem) 90vw, 48rem\" // bis 50 rem breite ist das Bild 90 % aufgelöst, ab 50 rem dann 48 (-padding 2x1)\r\n        // die 50 rem kommen als vordefinition aus dem CSS\r\n        alt=\"See\"\r\n        alt=\"Frau im Kanu\"\r\n        className=\"image\"\r\n        width=\"2\"\r\n        height=\"1\"\r\n        loading=\"lazy\"\r\n      />\r\n\r\n      <picture> {/* Hülle um das img Element */}\r\n        <source /* wenn hier bei source nichts passt, nimmt der Browser die normalen img Anweisungen */\r\n          media=\"(max-width: 30rem) and (orientation: portrait)\"\r\n          srcSet=\"/img/header-image-portrait.jpg\"\r\n        />\r\n        <source\r\n          media=\"(max-width: 40rem) and (orientation: portrait)\"\r\n          srcSet=\"/img/header-image-square.jpg\"\r\n        />\r\n        <img\r\n          className=\"image\"\r\n          src=\"/img/header-image-landscape@1000.jpg\"\r\n          srcSet=\"/img/header-image-landscape@1000.jpg 1000w,/img/header-image-landscape@1500.jpg 1500w,/img/header-image-landscape@2000.jpg 2000w\"\r\n          sizes=\"(max-width: 52rem) 90vw, 50rem\"\r\n          loading=\"lazy\"\r\n          alt=\"\"\r\n        />\r\n      </picture>\r\n\r\n      <picture>\r\n        <source srcSet=\"/img/herbst.webp\" type=\"image/webp\" />\r\n        <img\r\n          className=\"image\"\r\n          src=\"/img/herbst.jpg\"\r\n          alt=\"\"\r\n          loading=\"lazy\"\r\n          width=\"4\"\r\n          height=\"3\"\r\n        />\r\n      </picture>\r\n\r\n      <Image /* Image Element ist Next spezifisch - beste konvertierung */\r\n      src=\"/img/hong-kong.jpg\"\r\n      alt=\"Hong Kong\"\r\n      width={5184}\r\n      height={3456}\r\n      sizes=\"(max-width: 50rem) 90vw, 48rem\"\r\n      layout=\"responsive\"\r\n      />\r\n\r\n    </Layout>\r\n  );\r\n}\r\n\r\n\r\n","C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\pages\\blog.jsx",[],[],"C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\pages\\index.jsx",[],[],"C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\pages\\news.jsx",[],[],"C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\pages\\_app.jsx",[],[],"C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\components\\Footer.jsx",[],[],"C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\components\\Header.jsx",[],[],"C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\components\\Layout.jsx",[],[],"C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\components\\Navigation.jsx",[],[],"C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\components\\NewsItem.jsx",["85"],[],"import { useState } from \"react\";\r\nimport { useToggle } from \"@/hooks/useToggle\";\r\n\r\nexport default function NewsItem({title,url,description,urlToImage}) {\r\n\r\n    const [news,setNews] = useToggle(false);\r\n\r\n  return (\r\n    <article className=\"news-item slide-in-right\">\r\n      <h3 className=\"news-item__title\">\r\n        <a href={url}>{title}</a>\r\n      </h3>\r\n      <button onClick={setNews}>{news ? 'Weniger anzeigen' : 'Mehr anzeigen'}</button>\r\n      {news && (<div className=\"news-item__content\">\r\n        <img className=\"news-item__image\" src={urlToImage} alt=\"\" />\r\n        <p className=\"news-item__description\">{description}</p>\r\n      </div>\r\n      )}\r\n    </article>\r\n  );\r\n}\r\n\r\n// Seine Lösung:\r\n\r\n// export default function NewsItem({\r\n//     title,\r\n//     url,\r\n//     urlToImage,\r\n//     description,\r\n//     index,\r\n//   }) {\r\n//     const [visible, toggleVisible] = useToggle(false);\r\n  \r\n//     return (\r\n//       <article\r\n//         className=\"news-item slide-in-right\"\r\n//         style={{\r\n//           '--delay': `${index * 0.2}s`,\r\n//         }}\r\n//       >\r\n//         <h3 className=\"news-item__title\">\r\n//           <a href={url}>{title}</a>\r\n//         </h3>\r\n//         <button onClick={toggleVisible}>\r\n//           {visible ? 'Weniger anzeigen' : 'Mehr anzeigen'}\r\n//         </button>\r\n//         {visible && (\r\n//           <div className=\"news-item__content\">\r\n//             {urlToImage && (\r\n//               <img className=\"news-item__image\" src={urlToImage} alt=\"\" />\r\n//             )}\r\n//             <p className=\"news-item__description\">{description}</p>\r\n//           </div>\r\n//         )}\r\n//       </article>\r\n//     );\r\n//   }\r\n\r\n\r\n//   Mit Hilfe des useToggle-Hooks, den wir in der\r\n//   Custom Hooks-Übung geschrieben haben, soll der Content-Bereich\r\n//   ein- und ausgeblendet werden, der Text im Button soll entsprechend\r\n//   wechseln. Anfangs soll der Content eingeklappt sein.\r\n//   Das Bild nur anzeigen, wenn eine Bildquelle vorhanden\r\n//   ist. Das alt-Attribut kann leer bleiben, weil es im Datensatz leider\r\n//   nicht enthalten ist.\r\n   \r\n//     <article class=\"news-item\">\r\n//   <h3 class=\"news-item__title\">\r\n//     <a href=\"\">Titel</a>\r\n//   </h3>\r\n//   <button>\r\n//    Weniger anzeigen / Mehr anzeigen\r\n//   </button>\r\n//   <div class=\"news-item__content\">\r\n//   <img class=\"news-item__image\" src=\"\" alt=\"\" />\r\n//   <p class=\"news-item__description\">Nachrichtentext</p>\r\n//   </div>\r\n//   </article> */","C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\components\\NewsList.jsx",[],[],"C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\components\\ShuffleText.jsx",["86"],[],"/* \n1. Verbindet das Input-Element mit einem state \"text\"\n2. Wenn der Text sich ändert, soll der Inhalt des\nInput-Elements an unsere shuffletext-Schnittstelle gesendet\nwerden, der Antwort-Text soll in einem strong-Element\nmit der Klasse .big-text angezeigt werden. Nutzt dafür\nden state \"shuffledText\"\n3. Die Komponente auf der Startseite einsetzen.\n4. Bonus: Nutzt den Hook useDebouncedValue\n*/\n\nimport { useDebouncedValue } from '@/hooks/useDebouncedValue';\nimport { useEffect, useState } from 'react';\n\nexport default function ShuffleText() {\n  const [text, setText] = useState('');\n  const debouncedText = useDebouncedValue(text, 400);\n\n  const [shuffledText, setShuffledText] = useState('');\n\n  useShuffledText(debouncedText, setShuffledText);\n\n  return (\n    <div>\n      <label htmlFor=\"text\">Text</label>\n      <br />\n      <input\n        type=\"text\"\n        id=\"text\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      />\n      <strong className=\"big-text\">\n        {[...shuffledText].map((char) => (\n          <span\n            key={Math.random()}\n            style={{\n              '--delay': `${(Math.random() * 1).toFixed(2)}s`,\n            }}\n          >\n            {char}\n          </span>\n        ))}\n      </strong>\n    </div>\n  );\n}\n\nfunction useShuffledText(debouncedText, setShuffledText) {\n  useEffect(() => {\n    async function fetchText() {\n      try {\n        const response = await fetch(\n          `http://localhost:3000/api/shuffletext?text=${debouncedText}`\n        );\n\n        if (!response.ok) {\n          throw new Error('Problem beim Laden der Daten!');\n        }\n\n        const jsonData = await response.json();\n\n        setShuffledText(jsonData.text);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchText();\n  }, [debouncedText]);\n}\n","C:\\Users\\Student.CIMLENOVO10.000\\Documents\\javascript_react\\nextjs\\pages\\blog\\[slug].jsx",[],[],{"ruleId":"87","severity":1,"message":"88","line":26,"column":7,"nodeType":"89","endLine":34,"endColumn":9},{"ruleId":"87","severity":1,"message":"88","line":36,"column":7,"nodeType":"89","endLine":47,"endColumn":9},{"ruleId":"90","severity":2,"message":"91","line":42,"column":9,"nodeType":"92","messageId":"93","endLine":42,"endColumn":27},{"ruleId":"87","severity":1,"message":"88","line":58,"column":9,"nodeType":"89","endLine":65,"endColumn":11},{"ruleId":"87","severity":1,"message":"88","line":70,"column":9,"nodeType":"89","endLine":77,"endColumn":11},{"ruleId":"87","severity":1,"message":"88","line":15,"column":9,"nodeType":"89","endLine":15,"endColumn":69},{"ruleId":"94","severity":1,"message":"95","line":69,"column":6,"nodeType":"96","endLine":69,"endColumn":21,"suggestions":"97"},"@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setShuffledText'. Either include it or remove the dependency array. If 'setShuffledText' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["98"],{"desc":"99","fix":"100"},"Update the dependencies array to be: [debouncedText, setShuffledText]",{"range":"101","text":"102"},[1800,1815],"[debouncedText, setShuffledText]"]